/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import dao.HoaDonDAO;
import dao.KhachHangDAO;
import model.HoaDon;
import model.ChiTietHD;
import model.KhachHang;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import java.util.ArrayList;

/**
 *
 * @author khaid
 */
public class FormHD extends javax.swing.JPanel {
    private HoaDonDAO hoaDonDAO;
    private KhachHangDAO khachHangDAO;
    private DefaultTableModel tableModel;
    private List<KhachHang> danhSachKH;
    /**
     * Creates new form FormHD
     */
    public FormHD() {
        initComponents();
        
    hoaDonDAO = new HoaDonDAO();
    khachHangDAO = new KhachHangDAO();

    setupTable();
    setupComboBox();
    loadData();
    setupEvents();
    setupTableRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        spBills = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        cboList = new javax.swing.JComboBox<>();
        cboSearch = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnChiTietHD = new javax.swing.JButton();

        jButton1.setText("jButton1");

        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spBills.setViewportView(tblBills);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Danh sách hóa đơn");

        btnSearch.setText("Tìm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReset.setText("Làm mới");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel2.setText("Từ ngày:");

        jLabel3.setText("Đến ngày:");

        jLabel4.setText("Lọc theo:");

        btnDelete.setText("Xóa hóa đơn");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cboList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboListActionPerformed(evt);
            }
        });

        cboSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSearchActionPerformed(evt);
            }
        });

        jLabel5.setText("Danh sách");

        btnChiTietHD.setText("Chi tiết");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboList, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnChiTietHD, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete)))))
                .addContainerGap())
            .addComponent(spBills)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnReset))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnDelete)
                    .addComponent(cboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChiTietHD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spBills, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboListActionPerformed
    if (cboList.getSelectedItem() == null) return;
    
    String loai = cboList.getSelectedItem().toString();
    
    if (loai.equals("Tất cả")) {
        loadData();
    } else if (loai.equals("Theo khách hàng")) {
        cboSearch.removeAllItems();
        danhSachKH = khachHangDAO.getAllKhachHang();
        for (KhachHang kh : danhSachKH) {
            cboSearch.addItem(kh.getTenKH());
        }
    }
    }//GEN-LAST:event_cboListActionPerformed

    private void cboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSearchActionPerformed
    if (cboList.getSelectedItem() == null || cboSearch.getSelectedItem() == null) return;
    
    String loai = cboList.getSelectedItem().toString();
    
    if (loai.equals("Theo khách hàng")) {
        int index = cboSearch.getSelectedIndex();
        if (index >= 0 && danhSachKH != null && index < danhSachKH.size()) {
            KhachHang kh = danhSachKH.get(index);
            List<HoaDon> list = hoaDonDAO.locHoaDonTheoKhachHang(kh.getMaKH());
            hienThiDanhSach(list);
        }
    }
    }//GEN-LAST:event_cboSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
 Date tuNgay = jDateChooser1.getDate();
    Date denNgay = jDateChooser2.getDate();
    
    if (tuNgay == null || denNgay == null) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày!");
        return;
    }
    
    if (tuNgay.after(denNgay)) {
        JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải trước ngày kết thúc!");
        return;
    }
    
    java.sql.Date sqlTuNgay = new java.sql.Date(tuNgay.getTime());
    java.sql.Date sqlDenNgay = new java.sql.Date(denNgay.getTime());
    
    List<HoaDon> list = hoaDonDAO.locHoaDonTheoNgay(sqlTuNgay, sqlDenNgay);
    hienThiDanhSach(list);
    
    if (list.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn nào!");
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
    jDateChooser1.setDate(null);
    jDateChooser2.setDate(null);
    cboList.setSelectedIndex(0);
    cboSearch.setSelectedIndex(0);
    loadData();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    int row = tblBills.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn cần xóa!");
        return;
    }
    
    int maHD = (int) tableModel.getValueAt(row, 0);
    
    int confirm = JOptionPane.showConfirmDialog(this,
        "Bạn có chắc muốn xóa hóa đơn #" + maHD + "?",
        "Xác nhận xóa",
        JOptionPane.YES_NO_OPTION);
    
    if (confirm == JOptionPane.YES_OPTION) {
        if (hoaDonDAO.xoaHoaDon(maHD)) {
            JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!");
            loadData();
        } else {
            JOptionPane.showMessageDialog(this, "Xóa hóa đơn thất bại!");
        }
    }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChiTietHD;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cboList;
    private javax.swing.JComboBox<String> cboSearch;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane spBills;
    private javax.swing.JTable tblBills;
    // End of variables declaration//GEN-END:variables
    private void setupTable() {
        String[] columns = {"Mã HĐ", "Khách hàng", "Ngày lập", "Giờ", "Tổng tiền"};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblBills.setModel(tableModel);
        
        tblBills.getColumnModel().getColumn(0).setPreferredWidth(60);
        tblBills.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblBills.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblBills.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblBills.getColumnModel().getColumn(4).setPreferredWidth(120);
    }

    private void setupComboBox() {
        cboList.removeAllItems();
        cboList.addItem("Tất cả");
        cboList.addItem("Theo khách hàng");
        
        cboSearch.removeAllItems();
        cboSearch.addItem("Chọn khách hàng");
    }

    private void loadData() {
        tableModel.setRowCount(0);
        List<HoaDon> list = hoaDonDAO.getAllHoaDon();
        hienThiDanhSach(list);
    }

    private void hienThiDanhSach(List<HoaDon> list) {
        tableModel.setRowCount(0);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        
        for (HoaDon hd : list) {
            Object[] row = {
                hd.getMaHD(),
                hd.getTenKH() != null ? hd.getTenKH() : "Khách lẻ",
                hd.getNgayLap() != null ? dateFormat.format(hd.getNgayLap()) : "",
                hd.getGioLap() != null ? timeFormat.format(hd.getGioLap()) : "",
                String.format("%,.0f", hd.getTongTien())
            };
            tableModel.addRow(row);
        }
    }

    private void setupEvents() {
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    xemChiTietHoaDon();
                }
            }
        });
    }

    private void xemChiTietHoaDon() {
        int row = tblBills.getSelectedRow();
        if (row < 0) return;
        
        int maHD = (int) tableModel.getValueAt(row, 0);
        List<ChiTietHD> chiTiet = hoaDonDAO.getChiTietHoaDon(maHD);
        
        if (chiTiet.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Hóa đơn không có chi tiết!");
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append("CHI TIẾT HÓA ĐƠN #").append(maHD).append("\n");
        sb.append("=".repeat(50)).append("\n\n");
        
        double tong = 0;
        for (ChiTietHD ct : chiTiet) {
            sb.append(String.format("%-20s x%d\n", ct.getTenSP(), ct.getSoLuong()));
            sb.append(String.format("  %,.0f x %d = %,.0f đ\n\n", 
                ct.getDonGia(), ct.getSoLuong(), ct.getThanhTien()));
            tong += ct.getThanhTien();
        }
        
        sb.append("=".repeat(50)).append("\n");
        sb.append(String.format("TỔNG CỘNG: %,.0f đ", tong));
        
        JOptionPane.showMessageDialog(this, sb.toString(), 
            "Chi tiết hóa đơn", JOptionPane.INFORMATION_MESSAGE);
    }

    private void setupTableRenderer() {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        tblBills.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tblBills.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tblBills.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        tblBills.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
    }
}

